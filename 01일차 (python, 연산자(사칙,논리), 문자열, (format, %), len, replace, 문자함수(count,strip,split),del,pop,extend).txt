# Python 

http://www.python.org
http://anaconda.org # 이미 안에 파이썬이 들어있다. / 공짜는 아님

1990년 암스테르담 귀도 반 로섬 (Guido Van Rossum) 개발한 인터프리터 언어 
인터프리터 언어는 한줄씩 소스 코드를 해석해서 바로 실행해 결과를 확인 할 수 있는 언어

BBC에서 방영된 Monty python flying circus tv프로그램 이름

# Python 특징

- 문법이 아주 쉽다.
- 가독성이 좋다.
- 풍부한 라이브러리 
 # numpy : 수학, 과학 모듈
 # pandas : 데이터 검색 모듈
 # beautiple soup : 웹 스콜링 모듈
 # scikit-learn : 머신러닝
- 이식성 : 쉽게 라이브러리를 추가할 수 있다.
 	   파이썬은 C언어로 구현된 부분이여서 C계열 프로그램은 사용하기 편하다.

- 무료 : ★ FLOSS(Free Libre and Open Source Software)
 
	     자유 오픈 소스 소프트웨어
	     소프트웨어의 복사본을 마음대로 배포할 수 있고 소스코드가 공개되어 있어
	     언제든지 읽을 수 있으며 필요한 부분을 고칠 수 있고 새로운 자유소프트웨어를 작성할 때 
	     이 프로그램의 일부를 사용해도 된다는 의미
	     FLOSS는 지식을 공유하는 공동체 

- 동적타이밍 : 런타임시에 TYPE을 체크하는 동적타이밍을 지원
	       메모리관리를 자동으로 한다.


# 파이썬 언어로 할 수 있는 일

1. 시스템 유틸리티
2. GUI 프로그램
3. C, C++ 결합
4. 휍프로그래밍(장고)
5. 수치연산프로그래밍
6. 데이터베이스 프로그래밍
7. 머신러닝, 딥러닝

- 파이썬의 종류

Cython(c),Jyphon(java), Ironpython(c#), pypy(python)

print("오늘 하루도 행복하자")

- 사칙연산 

1+2
2-1
2*3
7/2  # 부동소수점 나누기
7//2 # 나눗셈의 몫(정수나누기, 소수점 이하는 버림)
7%2  # 나눗셈의 나머지만 표현
2**3 # 제곱연산
 
import math # 모듈 이름 
math.pow(2,3) # 모듈안에 있는 함수, 모듈이름.함수이름을 써야 실행이 가능하다.


(1+2)*3*2**3 - 괄호의 따라 연산자 우선순위가 달라진다.

# 연산자 우선순위

() <- ** <- *,/ <- +,- (우선순위가 같으면 왼쪽에서 오른쪽으로 진행)

# 변수(variable)

- 데이터를 저장할 수 있는 메모리 공간
- 첫글자 영문,_(밑줄)
- 두번째 글자 부터는 영문자,숫자,_ 가능
- 대소문자 구분한다.
- 예약어는 사용할 수 없다. 

# 파이썬의 특징 : 객체지향 프로그램 (Class) - 반복되는 코드를 쉽게 사용할 수 있다.

# import keyword
  keyword.kwlist

x=10 - 변수선언
print(x)
type(x) - 타입보기

# 연산자 축약으로 사용

a = 1
a = a+1 
a += 1

a = a-1
a -=1

a = a*1
a *= 1

a = a/2
a /= 2

a = a//2
a //= 2

f = 10.12 # 부동소숫점(float)
type(f)

f= 10.4e3 # 지수표현 10.4 * 10 ** 3
type(f) 

# 논리연산자 

x = 1
y = 2
y > x
y >= x
y < x
y <= x
y == x
y != x

2 > 1 and 3 > 2
2 > 1 or 3 > 2
not 1 > 2 

# 선언되있는 변수 확인

dir()
locals() # 선언변수 다 확인 
del(x) # 삭제 del(변수이름)

# 문자열 표현 - '', "" 모두 가능

'대한민국'
"짝짝짝"

"""대한민국
짝짝짝"""

'대한민국\n짝짝짝' 

# escape 식별자

\n 	# 줄바꿈
print("오늘 하루도 \n 행복하자")
- 결과
print("오늘 하루도 \n 행복하자")
오늘 하루도 
 행복하자


\t	# tab key와 성능이 같다.
print("오늘 하루도 \t 행복하자")
print("잘하자\t파이썬")
- 결과
print("오늘 하루도 \t 행복하자")
오늘 하루도   행복하자
print("잘하자\t파이썬")
잘하자     파이썬

\0	# Null 
print("잘하자\0파이썬")
- 결과
print("잘하자\0파이썬")
잘하자 파이썬

\\	# \표시
print("잘하자\0파이썬\\R)
- 결과
print("잘하자\0파이썬\\R")
잘하자 파이썬\R

# 인용문구 사용 ("" '' 잘 써서 사용)
print("잘하자\'파이썬\'")
- 결과
print("잘하자\'파이썬\'")
잘하자'파이썬'

x = "홍길동"
y = "파이썬개발자"

type(x)
- 결과
type(x)
Out[60]: str  -> string 이용

# 단어를 붙이는 방법 (+를 사용한다. 문자 연결연산자 +)
x+y
- 결과
Out[61]: '홍길동파이썬개발자

# 문자를 반복하는 방법 (* 사용)

(x+y)*2 # 2번 복제
- 결과
Out[62]: '홍길동파이썬개발자홍길동파이썬개발자'

print("="*15)
print("hello world")
print("="*15)
- 결과
===============
hello world
===============


# .format : print 옵션으로 {} 안 값에 선언한 변수 값을 넣어준다. 순서대로 값이 들어간다.

name="제임스"
music="클래식"

print("안녕하세요. {}입니다. 즐겨듣는 음악은 {}입니다.".format(name,music))

- 결과
안녕하세요. 제임스입니다. 즐겨듣는 음악은 클래식입니다.

# 다른방법 (포맷팅 코드)  : %s - 문자열 , %d - 정수

print("안녕하세요. %s입니다. 즐겨듣는 음악은 %s입니다." %(name,music))
-결과
안녕하세요. 제임스입니다. 즐겨듣는 음악은 클래식입니다.

x = 996
y = 8
result = x%y

print("{}를 {} 나누면 {}가 나머지 입니다.".format(x,y,result))
print("%d를 %d 나누면 %d가 나머지 입니다."%(x,y,result))
- 결과 
996를 8 나누면 4가 나머지 입니다.

result1 = x//y
result2 = x%y

print('%d를 %d로 나누면 %d는 몫이고 %d는 나머지 입니다.'%(x,y,result1,result2))
-결과
996를 8로 나누면 124는 몫이고 4는 나머지 입니다.

# divmod(x,y) 함수로 하는 방법 (몫과 나머지를 한번에 나오게 하는 방법)

divmod(x,y)
- 결과
Out[79]: (124, 4)

# divmod를 통해 값을 표현하는 방법 : 값이 두개 나오기 때문에 변수를 2개 지정해서 한번에 값을 표현할 수도 있다.

result1,result2 = divmod(x,y) 

print('%d를 %d로 나누면 %d는 몫이고 %d는 나머지 입니다.'%(x,y,result1,result2))

print("원주율은 %d 입니다. '%3.14159)
-결과
원주율은 3 입니다. # 정수라서 3으로

print("원주율은 {}입니다.".format(3.14159))
-결과 
원주율은 3.14159입니다. # 문자

print("원주율은 %f 입니다." %3.14159)
-결과 
원주율은 3.141590 입니다. # 실수

# len : 문자의 길이

x="행복한 하루를 보내자"
len(x)

# 인덱스 & 슬라이싱 : 방번호는 0번부터 시작이된다.

x[0] - 첫번째 글자
Out[88]: '행'
x[:] - 전체
x[-1] - 마지막 글자
x[0:3] - x[시작요소: 끝요소번호-1]

x[:3] - 위와 같다.
Out[93]: '행복한'

x[3:] - 3번부터 전체값 뽑아낸다.
Out[95]: ' 하루를 보내자'

x[4:6]
Out[96]: '하루'

x[4:-5]
Out[97]: '하루'

x[::2] - 2개씩 띄어서 값이 나온다 (2 4 6 8 10....)
Out[98]: '행한하를보자'

x[1:7:2] - 2번째 부터 6번째 까지 
Out[99]: '복 루'

x[5::2]
Out[100]: '루 내'

x[::-1] - 거꾸로 추출
Out[101]: '자내보 를루하 한복행'

# replace : 값을 지정하여 수정하는 함수

x='파리썬'
x.replace('리','이') # 변수.함수(요소) 로 함수가 진행된다.

★ R과 마찬가지로 미리보기로 실행되기 때문에 반드시 변수지정을 해줘야 한다.

# 문자함수

x= 'hello world'

# startswith : 원본 문자 열이 매개변수로 입력한 문자열로 시작되는지를 판단하는 함수 / boolean 함수이다.

x.startswith('h')
Out[165]: True

x.startswith('H') # 대소문자를 구분한다.
Out[166]: False

# endswith : end 원본 문자 열이 매개변수로 입력한 문자열로 끝나는지를 판단하는 함수 / boolean 함수이다.

x.endswith('d') 
x.endswith('ld') # 글자 수와 관계없이 확인하는 것이 가능하다. 즉, 패턴으로도 확인가능

# find : 원본 문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 앞에서부터 찾는다.
	 만약에 존재하지 않으면 -1로 값이 나온다.

x.find('w')
Out[170]: 6
x.find('world') # 단어, 문장으로도 찾을 수 있다. (시작하는 곳으로 숫자가 나온다.)
Out[172]: 6
x.find('A')
Out[171]: -1

# count : 원본 문자열 안에 매개변수로 입력한 문자열이 몇 번 나오는지에 대한 건 수 

x.count('l')
Out[173]: 3

# upper : 원본 문자열을 대문자로 변환

x.upper()
Out[176]: 'HELLO WORLD'

# lower : 원본 문자열을 소문자로 변환

x.lower()
Out[177]: 'hello world'

# capitalize : 원본 문자열을 첫글자 대문자 변환

x.capitalize()
Out[174]: 'Hello world' # 문장의 첫글자만 무조건 대문자로 바꾼다.

# title : 모든 단어의 첫글자를 대문자로 변환

x.title()
Out[175]: 'Hello World'

s= "HELLO, world"

# swapcase : 변수에 있는 단어에서 대문자는 소문자로, 소문자는 대문자로 바꿔주는 함수

s.swapcase()
Out[180]: 'hello, WORLD'


# center : 원본문자열을 지정한 공간 중앙에 배치하는 함수

s.center(20)
Out[181]: '    HELLO, world    '

# ljust : 원본문자열을 지정한 공간 왼쪽에 배치하는 함수

s.ljust(20)
Out[182]: 'HELLO, world        '

# rjust : 원본문자열을 지정한 공간 오른쪽에 배치하는 함수 

s.rjust(20)
Out[183]: '        HELLO, world'

x = '         hello           '
x

# strip : 원본문자열 양쪽에 공백제거

x.strip()
Out[185]: 'hello'

# lstrip : 원본문자열 왼쪽에 공백을 제거

x.lstrip()
Out[186]: 'hello
           '
# rstrip : 원본문자열 오른쪽에 공백을 제거

x.rstrip()
Out[187]: '         hello'

# strip(문자) : 문자의 값을 제거하는 것이 가능하다. 즉, 인수값을 적지않으면 공백, 문자값을 적으면 
		그 문자에 해당되는 값 제거

x = 'hello'
x.strip('h')
Out[190]: 'ello'

# lstrip 과 rstrip은 왼쪽, 오른쪽 값 하나씩만 삭제가 가능하다.

x = 'hello'
y = 'hello2018'
z = '안녕하세요'

# isalpha : 원본 문자열이 숫자, 기호를 제외한 알파벳, 한글로 이루어졌는지 확인 하는 함수 / boolean 함수이다.

x.isalpha()
Out[191]: True
y.isalpha()
Out[195]: False
z.isalpha()
Out[196]: True

# isalnum : 원본 문자열이 알파벳, 숫자로 이루어져 있는지 확인 (숫자로만 이루어져있거나 문자로만 있어서도 TRUE이다.)

x.isalnum()
Out[198]: True
y.isalnum()
Out[199]: True
z.isalnum()
Out[200]: True

# isnumeric : 원본 문자열이 숫자로만 이루어져 잇는지 확인하는 함수
 
x.isnumeric()
Out[202]: False
y.isnumeric()
Out[203]: False
z.isnumeric()
Out[204]: False

d='2018' # 문자열이 숫자이므로 TRUE 
Out[206]: True
e=3
e.isnumeric()
AttributeError: 'int' object has no attribute 'isnumeric' # int형이므로 string이 아니기 때문에 에러가 뜬다.

# replace : 한문자 뿐만 아니라 문자열도 새로운 값으로 변경이 가능하다.

x='hello'
x.replace('hello','python')
Out[209]: 'python'

# index와 find의 차이점 : 원본 문자열안에 매개변수로 입력한 문자열이 존재하는 위치를 앞에서 부터 찾는다. (공통점)
			  단, index에선 값이 존재하지 않는 경우 에러메세지가 뜬다.

x.find('o')
Out[211]: 4
x.find('O')
Out[212]: -1

x.index('o')
Out[213]: 4
x.index('O')
Traceback (most recent call last):

  File "<ipython-input-214-fbc29bbd43db>", line 1, in <module>
    x.index('O')

ValueError: substring not found

# rfind('o') : 원본문자열 안에 매개변수로 입력한 문자열이 존재하는 위치를 뒤에서부터 찾는다. 
	       단, 뒤에서 먼저 찾았어도 가장 앞에 있는값이 나온다

x.rfind('o')
Out[215]: 4

# in : 문자열의 존재여부를 확인 할 수 있다. / boolean 함수이다.

'o' in x
Out[216]: True

x='hello,world'

# split(,) : ,를 기준으로 문자열을 나누는 함수 / 원본문자열에 매개변수로 입력한 문자열을 기준으로
						 원본 문자열을 나눠 리스트로 만든다. list 모형으로 나오게 된다.

x.split(',') 
Out[218]: ['hello', 'world']

# '',join : 원본 글자 사이에 특정한 문자열을 추가한다. / '추가할 값'.join(변수)

x='abc'
x=','.join(x)
Out[220]: 'a,b,c'

# input : 입력값 받는 방법 / 문자형으로 받게 된다.

x = input() # 커맨드 라인에서 확인

1234

y = input()

1234

x+y
Out[297]: '12341234'

int(x)+int(y) # 문자를 int형으로 바꿔서 하면 계산이 된다.
Out[300]: 2468

○ R의 자료형

1. vector : 같은 데이터 타입을 갖는 1차원 배열 구조
2. matrix : 같은 데이터 타입을 갖는 2차원 배열 구조 
3. array  : 같은 데이터 타입을 갖는 다차원 배열 구조
4. list	  : 서로 다른 데이터 타입을 갖는 벡터들을 저장하거나 
	    또다른 list를 저장하는 구조 
5. data.frame : 서로 다른 데이터 타입을 갖는 컬럼으로 이루어진 2차원 배열 구조 (table)
6. factor 
7. table

★ 오늘 배운 Python을 R로 정리하기

★★★ Python 자료형 ★★★

1.list : 서로 다른 데이터 타입을 갖는 1차원배열구조
	 데이터 목록을 다루는 자료형
	 [] 로 list를 생성할 수 있다.

x=[10,20,30]

len(x)
Out[303]: 3

type(x)
Out[304]: list

# 리스트 인덱싱 

x[0] - 첫번째 요소를 찾는다.
x[-1] - 마지막 요소를 찾는다.

# 리스트 슬라이싱 [시작 : 끝-1]

x[0:2]
Out[306]: [10, 20]

x[1:]
Out[307]: [20, 30]

x[:-1]
Out[308]: [10, 20]

x[-1:]
Out[309]: [30]

# 리스트 값 수정 - 인덱스 번호로 수정이 가능하다.

x[0]=100 
x[1:3] = [200,300]

# append : 리스트변수 끝에 값을 추가

x.append(400)

x
Out[316]: [100, 200, 300, 400]

x1=[600,700]

# extend : list 끼리 붙이는 방법 / 기존 리스트 변수에 다른 리스트를 이어 붙이는 방법

x.extend(x1)

x
Out[319]: [100, 200, 300, 400, 600, 700]

# insert : list 중간에 값을 추가하는 방법 / 인덱스를 사용하여 특정 위치에 값을 입력하는 방법

x.insert(4,500)
Out[321]: [100, 200, 300, 400, 500, 600, 700]

x2=[800,900,1000]

# extend 말고도 + 부호를 통해서 기존 리스트 다음에 리스트를 추가하는 것이 가능하다.

x=x+x2

x
Out[324]: [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]

# pop : 리스트변수에 있는 값 중에 마지막 값을 제거하는 방법 / pop을 쓰면 자동적으로 값이 추출되어 list안에 없어진다.

x.pop() # 인덱스를 적지 않으면 맨 마지막 방에 있는 값 추출 / stack구조에서 pop을 생각하면 된다.
Out[326]: 1000

x.pop(4) # 4번방에 있는 값 추출
Out[327]: 500

# del : 리스트 인덱스 값을 삭제하는 방법 / pop 과 마찬가지로 사라지게 된다.

del x[3]
x
Out[329]: [100, 200, 300, 600, 700, 800, 900] # pop 과 del로 인해 값이 없어진 것을 확인할 수 있다.

drink=['콜라','사이다','환타','콜라','사이다','콜라']
len(drink)
drink.count('콜라')

drink.find('콜라') # list 에서는 find 함수를 사용하는 것이 불가능 하다/
AttributeError: 'list' object has no attribute 'find'

drink.index('콜라') # 함수를 사용하는 것이 가능하지만 처음에 있는 값만 나온다.
Out[335]: 0

drink.index('콜라',1) # 1번방 이후에 가장 가까운 값을 찾는다.
Out[336]: 3

drink.index('콜라',4) # 4번방 이후에 가장 가까운 값을 찾는다. 
Out[338]: 5

# 즉, index 검색을 하려면 시작지점을 지정해서 값을 만들어야 한다.

# remove : 리스트변수에 값을 기준으로 삭제하는 함수 

drink.remove('콜라')

drink # 값을 확인하면 가장 작은 수의 방에 있는 값이 사라진 것을 확인할 수 있다. 즉, loop를 만들어서 값을 사용해야한다.
Out[340]: ['사이다', '환타', '콜라', '사이다', '콜라']

