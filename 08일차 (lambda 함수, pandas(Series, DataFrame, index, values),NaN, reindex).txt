#  ★★ lambda(람다)함수
- 이름이 없는 한줄짜리 함수
- 가독성을 위해서 사용

def f(x,y):
	return x*y

f(2,3)

(lambda x,y:x*y)(2,3) # (lambda 변수선언:식 사용)(값입력)

f=lambda x,y:x*y
f(2,3)

# pandas ★★

- 데이터 분석 기능을 제공하는 라이브러리
- 1차원배열 : Series (R의 벡터모형과 같다.)
- 2차원배열 : Dataframe (r의 data.frame과 같다.)

import pandas as pd (as를 통해 함수 이름 바꾸는 것이 가능하다.)

from pandas import Series, DataFrame

# Series
- 1차원배열
- 인덱스(색인) 배열의 데이터에 연관된 이름을 가지고 있다.

s=Series([10,20,30,40,50])

Out[604]: # 색인 / 값  
0    10 
1    20
2    30
3    40
4    50
dtype: int64

# 색인만 확인하는 방법

s.index
Out[605]: RangeIndex(start=0, stop=5, step=1)

# value 확인

s.values
Out[606]: array([10, 20, 30, 40, 50], dtype=int64)

# 인덱스 수정

s.index=['a','b','c','d','e']


s
Out[608]: 
a    10
b    20
c    30
d    40
e    50
dtype: int64

# R 처럼 벡터연산이 가능하다

s+10
s-10
s*10
s/3
s//3
s%3

s2=Series([10,20,30,40],index=['a','b','c','d']) # index를 바로 입력하는 것이 가능하다.
s2['a']  # 인덱스 검색을 통해 값을 뽑는 것이 가능하다.
s2[['a','b']] # 2개이상 검색하고 싶다면 반드시 대괄호를 사용한다.

# 인덱싱 슬라이싱 하는 것은 같다.

s2[0]
s2[0:3]
s2[-1]

# 비교값을 넣어서 확인하는 것도 가능하다.

s2[s2>20]
s2[s2==20]
s2['a' in s2] # 인덱스 이름 확인 가능

s2['a']=100 # 수정
s2['e']=50 # 새로운 값 추가 (dictionary와 같다★★ in 값 사용시 )
del s2['e'] # 삭제
s2['a']='' # 삭제가능
del S2 # 변수 삭제

# dictionary 를 Series에 바로 적용하는 것도 가능하다.

dict ={'a':10,'b':20,'c':30,'d':40}
dict

s3=Series(dict)

dict ={'a':10,'b':20,'c':30,'d':40}
ix={'a','b','c','d'} # 각 인덱스에 해당하는 값만 가져온다.
s4=Series(dict,index=ix)
s4
b    20
c    30
a    10
d    40
dtype: int64

dict ={'a':10,'b':20,'c':30,'d':40}
ix={'a','b','c','z'} # 없는 값을 가져오면 None이 된다.
s5=Series(dict,index=ix)

s5
Out[635]: 
b    20.0
c    30.0
z     NaN
a    10.0
dtype: float64

dict ={'a':10,'b':20,'c':30,'d':40} # 원하는 값만 불러오는 것이 가능하다.
ix={'a','b'}
s6=Series(dict,index=ix)

# NaN (Not a Number): 인덱스 값을 찾을 수 없기 때문에 NaN 저장

pd.isnull(s5)
b    False
c    False
z     True
a    False
dtype: bool

pd.isnull(s5)
Out[641]: 
b    False
c    False
z     True
a    False
dtype: bool

pd.notnull(s5)
Out[642]: 
b     True
c     True
z    False
a     True
dtype: bool

dict={'서울':100,'부산':200,'광주':300,'제주':400}
s7=Series(dict)

city=['서울','광주','제주','인천']
s8=Series(dict, index=city) # 없는 city값이 있기 때문에 NaN 값이 나온다.

# DataFrame
- 2차원 배열 
- 표형식의 자료구조
- 각 컬럼은 서로 다른 종류의 값(문자, 숫자, 불리언)
- R언어 data.frame

df1 = DataFrame([[1,2,3],[4,5,6],[7,8,9]])

df1 = DataFrame([[1,2,3],[4,5,6],[7,8,9]])

Out[651]: 
   0  1  2
0  1  2  3
1  4  5  6
2  7  8  9


data={'도시':['광주','부산','강원','인천'],'인구수':[100,200,50,300]}
data
Out[653]: {'도시': ['광주', '부산', '강원', '인천'], '인구수': [100, 200, 50, 300]}

d2=DataFrame(data)

d2
Out[655]: 
   도시  인구수
0  광주  100
1  부산  200
2  강원   50
3  인천  300

d3=DataFrame({'도시':['광주','부산','강원','인천'],'인구수':[100,200,50,300]}) # 직접 입력도 가능하다.

d3.columns
Out[662]: Index(['도시', '인구수'], dtype='object')

# 컬럼이름 변경

d3.columns=['지역','가구수']

d3.지역 # 컬럼이름에 따른 값을 불러올 수 있다..
d3.가구수

d3['지역']
d3['가구수'] * 100 

0    10000
1    20000
2     5000
3    30000
Name: 가구수, dtype: int64

d3.index
Out[666]: RangeIndex(start=0, stop=4, step=1)

d3.index=['one','two','three','four']

       지역  가구수
one    광주  100
two    부산  200
three  강원   50
four   인천  300

# 행을 보는방법

d3.ix['one'] # 데이터프레임.ix['행이름']

지역      광주
가구수    100
Name: one, dtype: object

d3.ix[0] # 행 추출, 인덱스 번호는 그대로 있는 것이다.
지역      광주
가구수    100
d3.ix[1]

# Series를 통해서 dataframe에 추가 / 열값 추가
v=Series([1000,2000,3000,4000],index=['one','two','three','four'])
d3['부채']=v
d3['인구수']=[10000,20000,30000,5000] # 그냥 리스트로 붙여서 하는것도 가능하다.

del d3['부채']

data={'서울':{2001:200,2002:300},'부산':{2000:20,2001:20,2002:30}}

df4=DataFrame(data)
서울  부산
2000    NaN  20
2001  200.0  20
2002  300.0  30

# 전치 행렬 하는 방법
df4.T
Out[686]: 
    2000   2001   2002
서울   NaN  200.0  300.0
부산  20.0   20.0   30.0


df4.columns
df4.index
df4.values - array 모양으로 되어 있다.
Out[689]: 
array([[ nan,  20.],
       [200.,  20.],
       [300.,  30.]])

# 순차적으로 값을 뽑아내는 방법

obj = Series([10,20,30,40],index=['c','d','a','b'])

- reindex(재색인) : 새로운 색인에 맞도록 객체를 새로 생성하는 기능

obj2=obj.reindex(['a','b','c','d'])

obj2=obj.reindex(['a','b','c']) # index의 값을 불러오는 것이기 때문에 값을 불러오지 않으면 그대로 3개만 나온다.
obj2


obj3=obj.reindex(['a','b','c','z']) # 없는 값이므로 NaN이 나온다.