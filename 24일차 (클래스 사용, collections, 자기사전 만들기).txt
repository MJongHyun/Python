[문제193] 양의 정수값만 입력 받아서 나누기를 수행하는 positive_divide 함수를 생성하세요.


print(positive_divide())
 
분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : 2
5.0

print(positive_divide()) 
 
 분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : -2
오류  - 음수로 나눌수 없습니다. -2


print(positive_divide())

 분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : 0
오류 -  0으로 나눌수 없습니다. division by zero


def positive_divide():
    try:
        x=int(input('분자 숫자를 입력하세요 : '))
        y=int(input('분모 숫자를 입력하세요 : '))
        
        if y<0:
            raise Exception
        
        return x/y
        
    except Exception as error:
        
        if y<0:
            print('오류 - 음수로 나눌 수 없습니다.',y)
        elif y==0:
            print('오류 - 0으로 나눌 수 없습니다. {}' .format(error))

positive_divide()
    
"""
[문제193] 양의 정수값만 입력 받아서 나누기를 수행하는 positive_divide 함수를 생성하세요.

[참조 : https://docs.python.org/ko/3/library/exceptions.html]

positive_divide()
 
분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : 2
5.0

positive_divide()
 
 분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : -2
오류  - 음수로 나눌수 없습니다. -2

positive_divide()

 분자 숫자를 입력하세요 : 10
 분모 숫자를 입력하세요 : 0
오류 -  0으로 나눌수 없습니다. division by zero


def  positive_divide():
    try:
      
        x = int(input(' 분자 숫자를 입력하세요 : '))
        y = int(input(' 분모 숫자를 입력하세요 : '))
        
        if(y < 0):  
            raise ValueError
        return  x / y
    except ValueError as error:
        print('오류  - 음수로 나눌수 없습니다.', error)
    except ZeroDivisionError as error:
        print('오류 -  0으로 나눌수 없습니다.',error)

positive_divide()

def  positive_divide():
    try:
      
        x = int(input(' 분자 숫자를 입력하세요 : '))
        y = int(input(' 분모 숫자를 입력하세요 : '))
        
        if(y < 0):  
            raise ValueError
        return  x / y
    except ValueError:
        print('오류  - 음수로 나눌수 없습니다.', y)
    except ZeroDivisionError as error:
        print('오류 -  0으로 나눌수 없습니다.',error)

positive_divide()




class NegativeDivisionError(Exception): # 사용자 정의 언어를 통해 에러를 클래스로 표현이 가능하다.
    def __init__(self, value):
        self.value = value
        
def  positive_divide():
    try:
        # n = NegativeDivisionError
        
        x = int(input(' 분자 숫자를 입력하세요 : '))
        y = int(input(' 분모 숫자를 입력하세요 : '))
        
        if(y < 0):  
            raise NegativeDivisionError(y)
        return  x / y
    except NegativeDivisionError as error:
        print('오류  - 음수로 나눌수 없습니다.', error)
    except ZeroDivisionError as error:
        print('오류 -  0으로 나눌수 없습니다.',error)
"""

[문제194] 한주간동안 걸음수를 요일별로 그래프를 그리세요.
         단 막대그래프 함수를 생성해서 인수값으로 걸음수, 요일을 입력하면 그래프가 그려지도록하세요.

def walking(num,day):
    
    import matplotlib as mpl
    import matplotlib.pylab as plt
    font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
    rc('font', family=font_name)
    
    where=range(1,len(num)+1)
    
    plt.bar(where,num,align='center')
    plt.xticks(where,day) # x축과 y축을 바꾸겟다.
    plt.xlabel('요일')
    plt.ylabel('걸음수')
    plt.title('한주간 동안 걸음수')
    plt.grid()
    plt.show()
       
if __name__=='__main__':
    step = [1090,2000,3000,4000,10000,50000,2000]
    day = ['월','화','수','목','금','토','일']
    walking(step,day)   
 
"""
[문제194] 한주간동안 걸음수를 요일별로 그래프를 그리세요.
         단 막대그래프 함수를 생성해서 인수값으로 걸음수, 요일을 입력하면 그래프가 그려지도록하세요.

import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
rc('font', family=font_name)

def create_bar_chart(data, labels,bar):

    num_bars = len(data)

    positions = range(1, num_bars+1)
    if bar == 1:        
        plt.bar(positions, data, align='center')
        plt.xticks(positions, labels)
        plt.xlabel('요일')
        plt.ylabel('걸음수')
       
    else:
         plt.barh(positions, data, align='center')
         plt.yticks(positions, labels)
         plt.xlabel('걸음수')
         plt.ylabel('요일')
    

    plt.title('한주간 동안 걸음수') 
    plt.grid()
    plt.show()
    
if __name__=='__main__':
    step = [1090,2000,3000,4000,10000,50000,2000]
    labels = ['월','화','수','목','금','토','일']
    create_bar_chart(step,labels,2)   
"""

# 클래스로 만들기

[문제195] 문제 194번을 클래스화 하시요.

class walking:
    
    def __init__(self,num,day):
        self.num=num
        self.day=day
        self.where=range(1,len(num)+1) # 그래프 위치 지정 
        
    def graph(self):
        
        plt.bar(self.where,self.num,align='center')
        plt.xticks(self.where,self.day) # x축과 y축을 바꾸겟다.
        plt.xlabel('요일')
        plt.ylabel('걸음수')
        plt.title('한주간 동안 걸음수')
        plt.grid()
        plt.show()

step = [1090,2000,3000,4000,10000,50000,2000]
day = ['월','화','수','목','금','토','일']
d1=walking(step,day)
d1.graph()         
        
"""
[문제195]

import matplotlib.pylab as plt
from matplotlib import font_manager, rc
font_name = font_manager.FontProperties(fname="c:/Windows/Fonts/malgun.ttf").get_name()
rc('font', family=font_name)

class create_bar_chart:
    def __init__(self,data, labels, bar):
        self.data = data
        self.labels = labels
        self.bar = bar
        
    def create_bar_chart(self):
    
        num_bars = len(self.data)
    
        positions = range(1, num_bars+1)
        if self.bar == 1:
            plt.bar(positions, self.data, align='center')
            plt.xticks(positions, self.labels)
            plt.xlabel('요일')
            plt.ylabel('걸음수')
           
        else:
            plt.barh(positions, self.data, align='center')
            plt.yticks(positions, self.labels)
            plt.xlabel('걸음수')
            plt.ylabel('요일')
        
    
        plt.title('한주간 동안 걸음수') 
        plt.grid()
        plt.show()
    
if __name__=='__main__':
    step = [5000,6000,7500,10000,10000,20000,2000]
    labels = ['월','화','수','목','금','토','일']
    cbc = create_bar_chart(step,labels,1)
    cbc.create_bar_chart()
"""

import collections

# Counter : 컨테이너에 동일 한 값의 자료가 몇개 인지를 파악한다.

collections.Counter(['a','b','a','c','a','b'])
collections.Counter(['우리','나라','우리','대한민국','우리','행복']) # 빈도수가 높은 값부터 나온다.

container = collections.Counter() # 분석하기 위해 먼저 method를 변수에 지정한다.
container.update('aaaabbbcccdddddzzzzzz')
print(container)

container.update({'c':2,'e':5}) # 값을 더해서 추가하거나 새로운 값 추가하는 것이 가능하다.
print(container)

for i in 'abcdefyz':
    print('%s : %d' %(i,container[i]))

c=collections.Counter('hellow james')
print(c)
list(c.keys())
c.values()

ct = collections.Counter()
with open ("c:/data/hello.txt",'r') as f:
    for i in f:
        ct.update(i.rstrip().lower())
# 글자수 빈도별 체크 
        
for i, c in ct.most_common(5): # 제한을 걸어서 값을 새는 방법, 내림차순 정렬
    print("%s : %d" %(i,c))
    
# propt 실행 : pip install customized_konlpy # 자기 만의 사전만들
    
from konlpy.tag import Twitter
twitter = Twitter()

txt = "텍스트 마이닝은 텍스트 형태의 데이터를 수학적 알고리즘에 기초하여 수집, 처리, 분석, 요약하는 연구기법을 통칭하는 용어이다."

collections.Counter(twitter.nouns(txt)) #명사로 twitter를 나눠서 값을 센다.

from ckonlpy.tag import Twitter
twitter = Twitter()

twitter.add_dictionary('마이닝','Noun') # 주의: 값을 추가 했다고 해서 영원히 가는 것이 아니다. 따라서 추가를 해야한다.
collections.Counter(twitter.nouns(txt))


