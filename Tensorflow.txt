output layer 활성화함수

- 회귀 (regression) : 항등함수(identify function)
- 분류 (classification) : soft max function

- 분류문제에서 출력층의 node수는 분류하고 싶은 클래스 수로 설정하면 된다.

softmax function
- 출력값으로 확률벡터로 나온다.

TensorFlow
- 구글이 오픈소스로 공개한 머신러닝(machine learning) 라이브러리
- 다차원행렬계산(tensor), 대규모 숫자계산 작업을 수행한다.
- 딥러닝을 비롯한 여러 머신러닝에 사용되는 라이브러리 제공
- C++로 만들어진 라이브러리
- CPU, GPU 모드로 동작한다.
- PYTHON 지원한다.

Tensorflow 설치 
# Anaconda prompt에 가서 pip instll --upgrade tensorflow

import tensorflow as tf
tf.__version__
tensor = tf.constant('tensorflow')
tensor
print(tensor)

# tensor = "tensorflow" # 주의 파이썬의 변수로 동작

세션을 시작해야한다.
클라이언트 프로그램이 텐서플로 런타임 시스템과 통신하기 위해서는 세션이 생성되어야 한다.

sess = tf.Session() # 세션 생성
sess.run(tensor) # 세션으로 통한 실행
sess.close()

sess.run(tensor) # 오류가 된다 세션을 생성하지 않았기 때문에 세션을 반드시 실행해야한다.

a = tf.constant(1234)
b = tf.constant(5678)
add_op=a+b
add_op
sess = tf.Session()
sess.run(add_op)
sess.run([a,b,add_op])
sess.close()

a = tf.constant(2)
b = tf.constant(3)
c = tf.constant(4)

x1 = a+b*c
x2 = (a+b)*c
sess = tf.Session()
z1 = sess.run(x1)
z2 = sess.run(x2)
z1
z2
sess.close()

a = tf.constant(120,name='a') # 상수선언시 이름을 지정해서 헷갈리지않게 한다.
b = tf.constant(130,name='b') 
c = tf.constant(140,name='c') 
v = tf.Variable(0, name='v')
x1 = a+b+c
v = x1 # 변수 지정으로 해서 값을 넣는것이 가능하다.
assign_op = tf.assign(v,x1) # assign : 변수에 적은 값들을 같게 해준다. 상수값을 변수에 저장시켜준다. 주소값도 다르게 해준다.
sess = tf.Session()
sess.run(assign_op) # 계산된 결과가 나온다
sess.run(v) # v값에도 마찬가지로 같은 값이 넣어져 있다.
sess.run(x1)
sess.close()

x = tf.Variable([[1,2,3],[4,5,6]])
y = tf.Variable([[1,2],[3,4],[5,6]])
z = tf.Variable(0)
z = tf.matmul(x,y) # 행열의 곱

sess = tf.Session()
sess.run(tf.global_variables_initializer()) # 변수를 초기화 해주는 함수
sess.run(z) # 상수와 변수의 차이점  : 변수를 사용할 떄에는 run에 초기화 를 시킨후에 실행해야한다.
sess.close()

# placeholder : type을 정해놓고 실행

p1 = tf.placeholder('int32') 
p2 = tf.placeholder('int32')
y = tf.add(p1,p2)

sess = tf.Session()
sess.run(y, feed_dict={p1:10,p2:20})
sess.close()

함수            설명
----------------------------------------
tf.add          덧셈
tf.subtract     뺄셈
tf.multiply     곱셈
tf.div          나눗셈의 몫, 소수점
tf.truediv      나눗셈의 몫, 소수점
tf.mod          나눗셈의 나머지
tf.abs          절대값
tf.negative     음수
tf.sign         부호(음수 -1, 양수 1,0)
tf.reciprocal   역수(3은 1/3)
tf.square       제곱
tf.round        반올림
tf.sqrt         제곱근
tf.pow          거듭제곱
tf.exp          지수값
tf.log          로그값
tf.maximum      최대값
tf.minumum      최소값
tf.cos          코사인
tf.sin          사인

x = tf.Variable(0)
y = tf.assign(x,1)

# 세션을 열고 닫음을 한번에 with

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(sess.run(x))
    print(sess.run(y))
    print(sess.run(x))
    
[문제200] tensorflow 상수를 이용해서 아래와 같이 결과를 출력하는 프로그램을 만드세요   
a+b = 6
a*b = 8

a=tf.constant(4)
b=tf.constant(2)
z=tf.add(a,b)
x=tf.multiply(a,b)

sess=tf.Session()
print('a+b =',sess.run(z))
print('a*b =',sess.run(x))

sess.close()


[문제201] tensorflow 상수를 이용해서 아래와 같이 결과를 출력하는 프로그램을 만드세요
단 두 변수의 입력값을 실행시에 넣도록 하는 변수를 이용하세요.

Add=6
Multiply=8

a=tf.Variable(2)
b=tf.Variable(4)
x=tf.add(a,b)
y=tf.multiply(a,b)

sess=tf.Session()
sess.run(tf.global_variables_initializer())
sess.run(x)
sess.run(y)

print('Add={}' .format(sess.run(x)))
print('Multiply={}' .format(sess.run(y)))

'''
a = tf.placeholder(ft.int32)
b = tf.placeholder(ft.int32)
add = tf.add(a,b)
mul = tf.multiply(a,b)
sess = tf.Session()
print("Add : %d" "%Sess.run(add,feed_dict={a:2,b:4}))
print('Multiply : %d' %Sess.run(mul,feed_dict={a:2.b:4})
sess.close
'''

텐서 자료 구조
- 텐서는 텐서플로의 기본 자료 구조
- 텐서는 다차원배열, 리스트로 구성
- 텐서는 학습데이터가 저장되는 다차원배열

# 1차원 텐서 (tensor)
import numpy as np
import tensorflow as tf

arr_1 = np.array([1.5,1,5.0,10])
arr_1
arr_1[0]
arr_1.ndim
arr_1.shape
arr_1.dtype

arr_tf = tf.convert_to_tensor(arr_1,dtype=tf.float64) # tensor로 바꾸는 함수

with tf.Session() as sess:
    print(sess.run(arr_tf))
    print(sess.run(arr_tf[0])) # 인덱스 추출도 가능하다.
    
arr_tf.shape
arr_tf.dtype

#arr_tf.ndim 오류가 발생한다.

# 2차원 텐서
arr_1 = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr_2 = np.array(([1,1,1],[2,2,2],[3,3,3]))
type(arr_1)
type(arr_2)

tm1 = tf.constant(arr_1)
tm2 = tf.constant(arr_2)

tm_product = tf.matmul(tm1,tm2)
tm_Add = tf.add(tm1,tm2)
with tf.Session() as sess:
    print(sess.run(tm_product))
    print(sess.run(tm_Add))

# 3차원 텐서
arr_3 = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
arr_3.ndim
arr_3.shape
# (plane, row, column)

tm_3 = tf.constant(arr_3)
with tf.Session() as sess:
    print(sess.run(tm_3))
        
 x = tf.placeholder(tf.float32)   
 y = tf.placeholder(tf.float32)   
 z = tf.matmul(x,y)
with tf.Session() as sess:
    print(sess.run(z,feed_dict={x:[[3.,3.],[3.,3.]],y:[[5.,5.],[5.,5.,]]}))
    
 x = tf.placeholder(tf.float32,shape=(2,2))   
 y = tf.placeholder(tf.float32,shape=(2,2))   
 z = tf.matmul(x,y)
with tf.Session() as sess:
    print(sess.run(z,feed_dict={x:[[3.,3.],[3.,3.]],y:[[5.,5.],[5.,5.,]]}))

[문제 202]
x 변수는 1행 3열 모양의 1,2,3
w 변수는 3행 1열 모양의 2,2,2
y 변수는 x와 w 행렬의 곱을 이용한 결과를 수행하는 프로그램을 작성하세요.

x = tf.constant(np.array([[1.,2.,3.]]))
y = tf.constant(np.array([[2.],[2.],[2.]]))    
z = tf.matmul(x,y)

with tf.Session() as sess:
    print(sess.run(z))


x = tf.placeholder(tf.float32,shape=(1,3))   
y = tf.placeholder(tf.float32,shape=(3,1))   
z = tf.matmul(x,y)
with tf.Session() as sess:
    print(sess.run(z,feed_dict={x:[[1,2,3]],y:[[2],[2],[2]]}))

#######

x = tf.constant([[1.0,2.0,3.0]])
print(x.get_shape())
w = tf.constant([[2.0],[2.0],[2.0]])
print(w.get_shape())
y = tf.matmul(x,w)
sess = tf.Session()
print(sess.run(x))
print(sess.run(w))
print(sess.run(y))


x = tf.Variable([[1.0,2.0,3.0]])
w = tf.Variable([[2.0],[2.0],[2.0]])
y = tf.matmul(x,w)
init_op = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(init_op)
    print(sess.run(y))