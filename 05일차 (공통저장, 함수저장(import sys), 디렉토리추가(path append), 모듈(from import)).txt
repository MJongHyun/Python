# 재귀호출

- 자기 자신을 다시 호출한다.
- 함수안에서 내 함수를 호출한다.
- 반복문 + stack


# stack

FILO (First In Last Out) : 선입후출
LIFO (Last In First Out) : 후입선출

push : push 스택의 구조상 마지막 데이터 위치에 입력된다.

pop : 마지막 데이터 위치에서 데이터를 꺼내는 작업 (삭제)

stack [] 
push 하면 stack 변수에 값을 넣는다.
pop 하면 stack 변수에 값을 삭제한다.

def push(x):
    global stack
    stack.append(x)
    
def pop():
    global stack
    if len(stack)==0:
        return None
    return stack.pop()

# Factorial 함수

n! = n * (n-1) * (n-2) * ... * 2 * 1
n! = n * (n-1)!

5! = 5 * 4 * 3 * 2 * 1
5! = 5 * 4!
   = 5 * 4 * 3!
   = 5 * 4 * 3 * 2!
   = 5 * 4 * 3 * 2 * 1!
   = 5 * 4 * 3 * 2 * 1 * 0!

factorial 정리
	n * factorial(n-1) n >=1
factorial(n) = 1	   n = 0

def factorial(n):
	if n==0 : 
		return 1
	return n*factorial(n-1)

def fac(x):
    y=1
    for i in range(x,0,-1):
        y=y*i
    return y

# 유클리드 알고리즘
- 주어진 두 수 사이에 존재하는 최대공약수(GCD(Greatest Common Divisor))를 구하는 알고리즘

1. 두 수 m,n(m>n) 입력으로 들어온다.
2. n=0 이라면 m을 출력하고 알고리즘은 종료 
3. m이 n으로 나누어 떨어지면, n을 출력하고 알고리즘은 종료
4. 그렇지 않으면 m을 n으로 나눈 나머지를 새롭게 m에 대입하고 m과 n을 바꾸고 3번으로 돌아간다.

# 최대공약수
                
def gcd(x,y):
    
    if x>y:
        temp=y
        y=x
        x=temp
    
    if y%x==0:
        return x
    else:
        tmp=y%x
        y=x
        x=tmp
        return gcd(x,y) 

def gcd(x,y):
    
    if x<y:
        x,y=y,x
    
    while(y!=0):
	n=x%y
	x=y
	y=n
    return x

# 공통저장

c:\python\stddev.py #확장자는 py로 저장한다.

# 함수를 저장하여 저장한 값을 불러오는 방법

import sys # sys 모듈을 불러온다.
sys.path # 디렉토리 확인

# 디렉토리 추가

sys.path.append('c:\\python')
sys.path

# 디렉토리 추가 후 함수 불러오기
import stddev

# 모듈이름.함수이름()

stddev.stddev(2,3,1,7)

# from 모듈이름 import *  :모듈이름을 쓰지 않고 함수를 실행하는 방법

from stddev import * 
stddev(2,3,1,7)

# 파일 확장자 변경하기

컴퓨터 -> 구성 -> 폴더옵션 -> 숨김 파일 및 폴더 드라이브 표시에 체크




