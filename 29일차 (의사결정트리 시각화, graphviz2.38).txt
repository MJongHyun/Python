# 그래픽 나타내기
# C:\Program Files (x86)\Graphviz2.38\bin
# 환경변수들어가서 경로 설치하기 path 맨 뒤에 ;C:\Program Files (x86)\Graphviz2.38\bin <세미콜론 필수>

 #pip install pydotplus, pip install graphviz
 
import pydotplus
import graphviz
from sklearn.tree import export_graphviz
from IPython.display import Image

# 테스트

import pandas as pd
iris = pd.read_csv('c:/data/iris.csv')
x = iris.drop('Name',axis=1)
y = iris['Name']

from sklearn.model_selection import train_test_split # test_size에 맞게 갯수를 나눈다.

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)

from sklearn.tree import DecisionTreeClassifier # 의사결정트리
classifier = DecisionTreeClassifier() # 모델 만들기
classifier.fit(x_train,y_train) # train 습득 
y_pred=classifier.predict(x_test) # 학습 확인


# http://www.grapgviz.org # 파일사이트

# 모델, file 만들지말지, 목표변수에 찾아가기 (예> 꽃의 종류), 컬럼이름설정, 
dot_data=export_graphviz(classifier,out_file=None,feature_names=['SepalLength','SepalWidth','PetalLength','PetalWidth'],class_names=['Iris-setosa','Iris-virginca','Iris-virsicolor'],filled=True,rounded=True,special_characters=True)

graph=pydotplus.graph_from_dot_data(dot_data)

Image(graph.create_png())

# 지니지수가 기본 이고 만약 엔트로피로 바꾸고 싶다면 옵션을 통해 바꾼다.
classifier = DecisionTreeClassifier(criterion='entropy',max_depth=2) # 엔트로피로 하는 방법

titanic=pd.read_csv('c:/data/titanic.csv')
titanic.columns

# 독립변수가 숫자형이여만 의사결정트리를 사용하는 것이 가능하다.
# 그러므로 변수들의 값을 encoding 하여 진행을 해야한다.

# 남자는 1 여자는 0 으로 지정
# 변수.컬럼이름.map({데이터값:정할값})
titanic['gender']=titanic.gender.map({'female':0,'male':1}) # map({dict})

titanic.isnull() #Nan값 찾기

titanic.isnull().any() #  any Nan의 위치를 찾아주는 옵션
titanic.isnull().sum() # True에 해당하는 값 샌다. 각 컬럼의 Nan 갯수
titanic['age'].isnull().sum()
titanic.isnull().sum()['age']
titanic.isnull().sum().sum() # 전체 Nan의 갯수

titanic[titanic['age'].isnull()] # 나이가 Nan인 값만 추출하기, 부울린 인덱싱

# Nan 값은 보통 중앙값으로 대체를 많이 한다.
titanic.age.fillna(titanic.age.median(),inplace=True) #Na값 채우기 , median 중앙값으로 채우기
# inplace는 바로 적용하여 값을 넣는 방법

# embarked 탑승항구 : C(Cherbourg) <프랑스>, Q(Queenstown) <아일랜드>, S(Southampton) <영국>

titanic['embarked'] # 어디서 배를 탔는지를 보여준다. 가지고 있는 값이 독립변수로 지정을 해야한다.
# 이 값이 영향을 주는지 안주는지를 확인하고 싶다.

# dummy 변수 : 분석을 하기 위해 별도의 변수처럼 만들어서 하는 방법, 0 과 1로만 구성, 0과 1로만 표현
embarked_dummies = pd.get_dummies(titanic.embarked,prefix="embarked")
embarked_dummies # 각변수의 승선한 곳을 확인할 수 있다.

# 필요없는 값이 있다면 drop을 통해 삭제한다. 
embarked_dummies.drop(embarked_dummies.columns[0],axis=1,inplace=True)

# column 합치기 : concat

titanic = pd.concat([titanic,embarked_dummies],axis=1) # 0 은 rbind 1은 cbind

titanic.columns

# 영향을 주는 독립변수만 별도로 지정하기
feature_cols = ['pclass','gender','age','embarked_Q','embarked_S']
x = titanic[feature_cols]
x.head()
y = titanic.survived # 종속변수

from sklearn.tree import DecisionTreeClassifier # 사이클런

model = DecisionTreeClassifier(criterion='gini',max_depth=3)
model = DecisionTreeClassifier(criterion='entropy',max_depth=3)
model.fit(x,y)

# 어떤 변수가 영향을 많이 주는지 확인하는 방법, 의사결정 트리를 통해 찾는다.
pd.DataFrame({'feature':feature_cols,'importance':model.feature_importances_})
# model.feature_importances_ 값의 중요성

dot_data=export_graphviz(model,out_file=None,feature_names=['pclass','gender','age','embarked_Q','embarked_S'],class_names=['survive','death'],filled=True,rounded=True,special_characters=True)

graph=pydotplus.graph_from_dot_data(dot_data)

Image(graph.create_png())






