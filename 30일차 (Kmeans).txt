from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

iris=pd.read_csv('c:/data/iris.csv')

plt.scatter(iris.SepalLength,iris.SepalWidth,s=40)
plt.title('Sepal')

plt.scatter(iris.PetalLength,iris.PetalWidth,s=40)
plt.title('Petal')

model = KMeans(n_clusters=3) #n_clusters , K 값을 의미
model.fit(iris.ix[:,0:4]) # 분류학습 
model.labels_ # 3가지 레벨이 분류 되있음을 확인 할 수 있다.

colormap=np.array(['red','blue','black'])

plt.scatter(iris.SepalLength,iris.SepalWidth,c=colormap[model.labels_],s=40) # s는 크기를 의미
plt.title('K Mean Classification')

model
"""
KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
    n_clusters=3, n_init=10, n_jobs=1, precompute_distances='auto',
    random_state=None, tol=0.0001, verbose=0)
"""

'k-means++', # 초기값을 설정 할때 처음위치들을 분류 값으로 놓고 kmean을 시작한다.


# 만약 4가지로 하면? 비지도 학습이기 때문에 값이 정해지지 않아 K 값에따라 다 가능하다.

model = KMeans(n_clusters=4)
model.fit(iris.ix[:,0:4]) # 분류학습 
model.labels_
colormap=np.array(['red','blue','black','green'])
plt.scatter(iris.SepalLength,iris.SepalWidth,c=colormap[model.labels_],s=40) # s는 크기를 의미
plt.title('K Mean Classification')

# 아카데미 예제
academy=pd.read_csv("c:/data/academy1.csv")
academy.columns
model = KMeans(n_clusters=4)
model.fit(academy.ix[:,2:4])
model.labels_
model.cluster_centers_
colormap=np.array(['red','blue','black','yellow'])

plt.scatter(academy.ix[:,2],academy.ix[:,3],c=colormap[model.labels_],s=40)
centers=pd.DataFrame(model.cluster_centers_)
plt.scatter(centers.ix[:,0],centers.ix[:,1],s=50,marker='D',c='g')


# k값을 모를 때 K값을 찾는 방법

ks=range(1,10)
inertia =[]
for k in ks:
    model = KMeans(n_clusters=k)
    model.fit(academy.ix[:,2:4])
    inertia.append(model.inertia_) # 값을 추가한다.

inertia # 값을 보면 확 줄어들떄가 있고 더디게 줄어드는 곳이 있다. 인덱스 번호로 4~6이 더디게 줄어든다.

# 값이 작을 수록 응집도가 높다(좋다.)    
  
plt.plot(ks,inertia,'-o') 
plt.xlabel('number of cluster K') 
plt.ylabel('inertia')
plt.xticks(ks) # x의 축레벨 구성
plt.show()

# k값 정하기
# 1. 직관적 2. 응집도를 통해 선택 <딱 꺾이는 부분 (여기선 3,4)>, 일정한 부분이 만들어지는 경우

# inertia value - 각 중심점에서 군집의 데이터간의 거리를 합산한 것으로 군집의 응집도를 나타내는 값이다.
                - 이 값이 작을수록 응집도가 높게 군집화가 잘되었다고 평가한다.
                - K 값을 크게 하면 확실하게 꺾이는 정도를 확인할 수 있다.
                
# 4개의 변수로 나타내기 

academy                

model=KMeans(n_clusters=2)
model.fit(academy.ix[:,1:6])
level=model.labels_
academy_t=pd.concat([academy,pd.DataFrame(level)],axis=1)
model.cluster_centers_
# 0 합격 1 불합격







